---
// 1. 修正 ECharts 类型定义：EChartsOption（复数）
import type { EChartsOption } from 'echarts';

// 组件接收的 Props 定义
interface Props {
  // 必传：ECharts 配置项（图表类型、数据等）
  option: EChartsOption;
  // 可选：图表容器样式（默认宽100%、高400px）
  style?: { [key: string]: string };
  // 可选：图表ID（用于多图表区分，默认自动生成）
  id?: string;
}

// 解构 Props，设置默认值
const {
  option,
  style = { width: '100%', height: '400px' },
  // 2. 替换 substr 为 slice，避免弃用警告
  id = `echart-${Math.random().toString(36).slice(2, 11)}`
} = Astro.props;
---

<!-- 图表容器：绑定 ID 和样式 -->
<div id={id} style={style}></div>

<script>
  // 3. 移除 solid-js 依赖，改用 Astro 原生 DOM 加载事件
  import * as echarts from 'echarts';

  // 4. 从 Astro.props 中读取组件传入的参数（脚本内无法直接访问顶部变量）
  const { option, id } = Astro.props;

  // DOM 加载完成后初始化图表（确保容器已渲染）
  document.addEventListener('DOMContentLoaded', () => {
    // 获取图表容器元素
    const chartContainer = document.getElementById(id);
    if (!chartContainer) return; // 容器不存在时跳过

    // 初始化 ECharts 实例
    const myChart = echarts.init(chartContainer);

    // 传入配置项，渲染图表
    myChart.setOption(option);

    // 监听窗口 resize，自动调整图表尺寸（适配响应式）
    window.addEventListener('resize', () => {
      myChart.resize();
    });
  });
</script>